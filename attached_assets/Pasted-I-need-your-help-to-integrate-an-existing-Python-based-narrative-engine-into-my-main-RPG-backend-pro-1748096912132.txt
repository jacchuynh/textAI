I need your help to integrate an existing Python-based narrative engine into my main RPG backend project. This involves refactoring the narrative engine's code to fit the target architecture, ensuring it works harmoniously with other existing and planned systems, and leveraging technologies like Pydantic, SQLAlchemy, and potentially Celery.

**1. Overall Goal:**

Integrate the features and logic from my standalone `narrative engine 0.1.3 3` (source code will be provided) into our primary backend project . The integrated narrative system should be robust, maintainable, and well-incorporated into the existing architecture.

**2. Target Project Context

*   **Tech Stack:**
    *   Python 3.x
    *   FastAPI for API endpoints.
    *   Uvicorn as the ASGI server.
    *   SQLAlchemy for PostgreSQL database interactions (you'll help define new models if needed).
    *   Pydantic for data validation and settings.
    *   Celery with Redis for asynchronous task processing
*   **Key Existing Components:**
    *   models.py: Contains Pydantic models like `Character`, `Domain`, `Tag`. The narrative engine will need to interact with or extend these, especially `Character`.
    *   domain_system.py: Manages character progression, skills, and domains. Narrative events might be triggered by or influence this system.
    *   celery_app.py & tasks.py: Foundation for running background tasks.

**3. Source System Context: narrative engine 0.1.3 3

This folder contains the standalone narrative engine. Key files include (but are not limited to):

*   event_bus.py: Seems crucial for inter-component communication within the narrative engine. Consider how this can be integrated or if a project-wide event bus should be established.
*   narrative_context_manager.py & narrative_context.py: Manage the state and context for narrative generation.
*   world_state.py: Represents the game world's state from the narrative engine's perspective.
*   ai_gm_dialogue_generator.py: Generates dialogue. Needs to be reconciled/integrated with any dialogue generation capabilities in the `ai_gm_brain` system (see section 5).
*   relationship_system.py: Manages NPC relationships. This will likely need database persistence.
*   narrative_generator.py, narrative_thread_manager.py, branch_definitions.py: Core logic for creating and managing narrative arcs.
*   world_event_trigger_system.py: Triggers narrative events based on world conditions.
*   template_processor.py / template_processor_enhanced.py: For processing narrative templates.

**4. Core Integration Task & Requirements:**

Your primary task is to refactor and integrate the code from `narrative engine 0.1.3 3` into the `workspace test/app/` structure.

*   **A. Code Placement and Structure:**
    *   Propose a new structure within `src/app/` for the narrative engine components. For example:
        *   `app/services/narrative_service.py`: For high-level narrative logic and API.
        *   `app/models/narrative_models.py`: For Pydantic/SQLAlchemy models specific to the narrative system (e.g., `NarrativeArc`, `QuestState`, `Relationship`).
        *   `app/narrative_engine/` (sub-package): For more granular components of the refactored engine if needed.
*   **B. Refactoring and Adaptation:**
    *   **Modernize Data Structures:** Convert any custom data classes in the narrative engine to Pydantic models for validation and consistency.
    *   **Database Persistence:**
        *   Identify all data that needs to be persisted (e.g., narrative progress, character relationships, active quests derived from narrative).
        *   Define new SQLAlchemy models in `app/models/narrative_models.py` or extend existing ones in models.py.
        *   Ensure all database operations use the existing SQLAlchemy session management pattern in `workspace test`.
    *   **Configuration:** Any configurable aspects of the narrative engine should use a Pydantic `BaseSettings` model, loaded from environment variables or a config file, consistent with the target project.
    *   **Logging:** Integrate with a standard logging setup (e.g., Python's built-in `logging` module, configured centrally in `workspace test`).
    *   **Dependencies:** List any new external dependencies required by the narrative engine and how to add them (e.g., to a `requirements.txt`).
    *   **Imports:** Update all import statements to reflect the new locations within the `workspace test` project.
*   **C. Event Bus Integration (event_bus.py):**
    *   This is critical. Evaluate the existing event_bus.py from the narrative engine.
    *   **Option 1:** Adapt it to become a central, project-wide event bus service within `workspace test/app/services/`. All systems (narrative, economy, NPC AI, etc.) would use this.
    *   **Option 2:** If a project-wide event bus is too complex now, ensure the narrative engine's internal event bus is properly encapsulated and initialized.
    *   Provide clear mechanisms for other systems to publish events that the narrative engine can consume, and for the narrative engine to publish events that other systems can react to.
*   **D. LLM Integration:**
    *   If ai_gm_dialogue_generator.py or other parts of the narrative engine use LLMs, they should be adapted to use the centralized LLM management approach potentially found in the `ai_gm_brain` project (specifically ai_gm_llm_manager.py). If `ai_gm_brain` is not yet integrated, design for a future where LLM calls are managed centrally.
*   **E. Asynchronous Operations (Celery):**
    *   Identify any long-running processes within the narrative engine that would benefit from being Celery tasks (e.g., complex narrative arc generation, processing consequences of major narrative events, LLM calls for non-real-time content).
    *   Define these tasks in tasks.py and show how the `NarrativeService` would invoke them.

**5. Harmonious Inter-System Collaboration:**

The integrated narrative engine must work seamlessly with other systems:

*   **domain_system.py & models.py (`Character` model):**
    *   Narrative choices and progression should be able_to affect character skills, domains, tags, and vice-versa.
    *   The `Character` model should be the central representation, potentially extended with narrative-specific attributes or linked to narrative-specific models.
*   **`ai_gm_brain` (External System - ai_gm_brain):**
    *   The ai_gm_dialogue_generator.py from the narrative engine needs to be reconciled with `ai_gm_brain/ai_gm_response_generator.py` or `ai_gm_brain/ai_gm_narrative_generator.py`. Determine if one should supersede the other, or how they should collaborate.
    *   The AI GM's decisions (ai_gm_decision_logic.py) should be able to trigger narrative events, and the narrative context should inform the AI GM.
*   **NPC Simulation System (Future):**
    *   NPC actions, goals, and states (from the future NPC simulation system) should trigger narrative events.
    *   Narrative arcs and quests generated by the engine should provide goals and context for NPCs.
*   **Economy System (Future - based on `/Users/jacc/Downloads/economy system 0.1.3/`):**
    *   Economic events (e.g., resource scarcity, trade boom) can trigger narrative threads.
    *   Narrative quests can have economic prerequisites or consequences (e.g., "retrieve lost cargo," "establish a new trade route").
*   **Dynamic Quest System (Future):**
    *   The narrative engine will likely be a core component in generating and managing dynamic quests. Design the narrative service API to support this.

**6. API Exposure (FastAPI):**

*   Determine if any narrative engine functionalities should be exposed via FastAPI endpoints in api. Examples:
    *   Endpoints for triggering specific narrative events (for debugging or admin).
    *   Endpoints for fetching current narrative state for a player/character.
    *   Endpoints for player choices in narrative branches.

**7. Expected Deliverables:**

*   **Refactored Code:** All necessary new Python files and modifications to existing files within the `/Users/jacc/Downloads/workspace test/app/` directory structure.
*   **SQLAlchemy Models:** Definitions for any new database tables required by the narrative engine.
*   **Integration Plan:** A clear explanation of:
    *   Where the narrative engine's components have been placed.
    *   How key features (event bus, context management, relationship system, etc.) have been integrated.
    *   How the narrative engine interacts with other systems (Domain, AI GM, future NPC/Economy systems).
    *   How to initialize and use the `NarrativeService`.
*   **Usage Examples:** Snippets showing how to trigger narrative events, how characters interact with narrative branches, etc.
*   **List of Assumptions Made:** Any assumptions you had to make during the integration.
*   **Further Recommendations:** Any suggestions for future improvements or considerations.

**8. Key Considerations for You (the Replit AI):**

*   **Modularity:** Keep components of the narrative engine as modular as possible.
*   **Clarity:** Code should be well-commented and easy to understand.
*   **Testability:** Design components in a way that facilitates unit and integration testing (though you don't need to write the tests themselves unless asked).
*   **Idempotency:** For any operations that might be retried (especially Celery tasks or event handlers), consider if they need to be idempotent.

Please analyze the provided narrative engine code and propose a robust integration into the target project. I am looking for a solution that is both functional and follows good software engineering principles.