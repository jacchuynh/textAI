


Here's a comprehensive implementation plan for your AI-driven text-based fantasy RPG's economy system:

**Overall Architecture Reminder:**
*   **Backend:** Python (FastAPI for APIs, SQLAlchemy for DB, Pydantic for data validation)
*   **Asynchronous Tasks:** Celery with Redis as a message broker.
*   **Database:** SQLite for local development (as per `database.py`), potentially PostgreSQL or other for more robust deployment.

---

**Phase 1: Core Data Structures & Database Setup (Partially Completed)**

*   **1.1. Pydantic Models (Review & Finalize)**

        *   Ensure all other Pydantic models (`Item`, `InventorySlot`, `Shop`, `MarketRegionInfo`, `Business`) are finalized.
*   **1.2. SQLAlchemy Models (Define/Review)**
    *   **Status:**
    *   **Action:**
        *   Ensure `DBLocation` SQLAlchemy model is robust and correctly links to `DBMarketRegionInfo` (e.g., via `ForeignKey("market_regions.region_id")`).
        *   Verify all fields from Pydantic models are appropriately represented in their `DB<ModelName>` counterparts (e.g., `DBItem`, `DBShop`, `DBBusiness`).
        *   Confirm use of JSON for complex dictionary/list fields like `inventory`, `tags`, `category_price_modifiers`, etc.
*   **1.3. Database Initialization & Session Management (
*   **1.4. CRUD Operations 

 Add any model-specific query methods as they become necessary (e.g., "find items with tag X").

---

**Phase 2: Basic Economic Services & Interactions**

*   **2.1. `Character` Model DB Representation & CRUD**
    *   **Action:**
        1.  Define `DBCharacter`  It should mirror the Pydantic `Character` model, especially `currency` (Float) and `inventory` (JSON, storing `Dict[str, InventorySlot.model_dump()]`).
        2.  Add `CRUDCharacter` class to, similar to other CRUD classes.
        3.  Export `DBCharacter` and `character` (the CRUD instance) from /__init__.py`.
*   **2.2. `ShopService` Enhancement (Database Integration)**
    *   **File:** `shop_service.py`
    *   **Action:**
        1.  **Dependency Injection:** Modify `ShopService` methods to accept a `db: Session` argument (e.g., `def get_shop_inventory_display(self, db: Session, shop_id: str, ...)`).
        2.  **Replace Data Stores:**
            *   Remove `ALL_ITEMS_MASTER`, `ALL_SHOPS_MASTER`, `ALL_MARKET_REGIONS_MASTER`.
            *   In methods like `get_shop_inventory_display` and `calculate_item_price`, fetch data using `crud.item.get(db, item_id)`, `crud.shop.get(db, shop_id)`, `crud.market_region_info.get(db, region_id)`.
        3.  **Data Handling:** Adapt logic to work with SQLAlchemy model instances (e.g., `db_item.name`) instead of direct dictionary access. Pydantic models can still be used for structuring return data.
        4.  **`get_shop_inventory_display`:**
            *   Fetch `DBShop` instance.
            *   Iterate its `inventory` (JSON field). For each `item_id` and `slot_data` in the shop's inventory:
                *   Fetch `DBItem` template.
                *   Reconstruct `InventorySlot` Pydantic model from `slot_data` if needed for logic.
                *   Call `calculate_item_price` using DB data.
        5.  **`calculate_item_price`:**
            *   Fetch `DBItem`.
            *   Fetch `DBMarketRegionInfo` based on `location_id` (this implies `DBLocation` needs a `region_id` and `DBShop` needs a `location_id` that can be used to find the `DBLocation` and then its `region_id`).
            *   Use actual data from these DB objects for modifiers.
        6.  **Shop Creation/Management Methods (New):**
            *   `create_shop(self, db: Session, shop_data: pydantic_models.Shop) -> db_models.DBShop`: Uses `crud.shop.create(db, obj_in=shop_data)`.
            *   `add_item_to_shop_inventory(self, db: Session, shop_id: str, item_id: str, quantity: int, price_override: Optional[float] = None)`: Fetches `DBShop`, updates its `inventory` JSON field, and saves. Handle stackability and `max_stack` from `DBItem`.
            *   `remove_item_from_shop_inventory(self, db: Session, shop_id: str, item_id: str, quantity: int)`: Similar to add.
            *   `update_shop_currency(self, db: Session, shop_id: str, amount: float)`: Updates `DBShop.currency_balance`.
        7.  **Relationship Modifiers (Mocked):** For now, include a placeholder private method like `_get_relationship_modifier(self, player_id: str, shop_owner_id: str) -> float` that returns `1.0`.
*   **2.3. `TransactionService` Review & DB Integration**
    *   **File:** `transaction_service.py`
    *   **Action:**
        1.  **Dependency Injection:** Modify methods (`player_buy_item`, `player_sell_item`) to accept `db: Session`.
        2.  **Replace Data Stores:** Remove mock global dictionaries.
        3.  **Fetch Entities:** Use `crud.character.get()`, `crud.shop.get()`, `crud.item.get()` to fetch entities.
        4.  **Inventory & Currency Updates:**
            *   Directly modify the `inventory` (JSON) and `currency` fields of the `DBCharacter` and `DBShop` SQLAlchemy objects.
            *   Ensure changes are committed to the database: `db.commit()`.
            *   The logic for stackable/non-stackable items and `max_stack` (fetched from `DBItem`) remains crucial.
        5.  **Transactional Integrity:** Wrap database operations within a `try/except` block. If an error occurs, call `db.rollback()`. The `get_db` context manager in `database.py` handles basic session closing, but explicit rollback on business logic failure is good practice.
        6.  **Event Bus:** Ensure `event_bus.publish(...)` is still called correctly after successful transactions.

---

**Phase 3: Business & Production Systems**

*   **3.1. `BusinessService` Development**
    *   **File:** Create `business_service.py`.
    *   **Action:**
        1.  Define `BusinessService` class.
        2.  **CRUD Integration:** Methods will take `db: Session`.
        3.  **Core Methods:**
            *   `create_business(self, db: Session, business_data: pydantic_models.Business) -> db_models.DBBusiness`: Uses `crud.business.create()`.
            *   `get_business_details(self, db: Session, business_id: str) -> Optional[db_models.DBBusiness]`: Uses `crud.business.get()`.
            *   `update_business_capital(self, db: Session, business_id: str, amount: float)`
            *   `manage_business_inventory(self, db: Session, business_id: str, item_id: str, quantity_change: int, is_raw_material: bool)`: Modifies `DBBusiness.inventory` JSON.
        4.  **Production Cycle Method:**
            *   `process_production_tick(self, db: Session, business_id: str)`:
                *   Fetch `DBBusiness`.
                *   Check `input_materials_required` against current `inventory`.
                *   If inputs available, consume them (update inventory).
                *   Add `production_capacity` of output items to `inventory`.
                *   Update `capital` (subtract upkeep, add revenue if items are "sold" to market or an internal stock).
                *   Update `efficiency`, `morale` based on simple rules (e.g., morale drops if no inputs).
                *   This method will likely be called by a Celery task later.
        5.  **Employee Management (Placeholder):** Methods like `hire_employee`, `fire_employee`. For now, these might just update the `employees` list (NPC IDs) in `DBBusiness`. Full NPC integration comes later.
*   **3.2. Link Production to `Item` Data**
    *   **Action:** Ensure `DBItem` contains all necessary data for production (e.g., if some items are exclusively craftable, or if recipes are stored elsewhere and reference item IDs).

---

**Phase 4: Market Dynamics & Simulation**

*   **4.1. `MarketService` Development**
    *   **File:** Create `market_service.py`.
    *   **Action:**
        1.  Define `MarketService` class.
        2.  **CRUD Integration:** Methods take `db: Session`.
        3.  **Core Methods:**
            *   `get_market_region_info(self, db: Session, region_id: str) -> Optional[db_models.DBMarketRegionInfo]`: Uses `crud.market_region_info.get()`.
            *   `update_supply_demand_signal(self, db: Session, region_id: str, item_category_or_id: str, change: float)`: Modifies `supply_demand_signals` in `DBMarketRegionInfo`.
            *   `update_regional_price_modifiers(self, db: Session, region_id: str, new_modifiers: Dict[pydantic_models.ItemCategory, float])`: Updates `category_price_modifiers`.
        4.  **Market Simulation Method:**
            *   `simulate_market_tick(self, db: Session, region_id: str)`:
                *   Fetch `DBMarketRegionInfo`.
                *   **Gather Data:**
                    *   Aggregate potential supply from all `DBBusiness` entities in that region (based on their production capacity and current output).
                    *   Aggregate potential demand (e.g., from NPC consumption simulation, player buy orders if tracked).
                *   **Update Signals:** Adjust `supply_demand_signals` based on this aggregated data. For example, if total production of "food" > total consumption of "food", the signal for "food" might decrease (surplus).
                *   **Price Adjustments:** Based on new signals, slightly adjust `regional_price_modifier` or specific `category_price_modifiers`. (e.g., high demand for weapons increases weapon category modifier).
                *   This method will be called by a Celery task.
        5.  **Market Report Generation:**
            *   `get_market_report(self, db: Session, region_id: str) -> Dict`: Returns a summary of current prices, supply/demand signals, and perhaps trends for key item categories.

---

**Phase 5: Advanced Economic Activities**

*   **5.1. `InvestmentService` Development**
    *   **File:** Create `/Users/jacc/Downloads/workspace test/app/services/investment_service.py`.
    *   **Action:**
        *   Methods for players/NPCs to invest capital into `DBBusiness` entities.
        *   Logic for calculating returns on investment (e.g., a share of profits from `DBBusiness.weekly_income_history`).
        *   Track investments (perhaps a new `DBInvestment` table linking Character/NPC to Business and amount).
*   **5.2. `TradeService` Development**
    *   **File:** Create `/Users/jacc/Downloads/workspace test/app/services/trade_service.py`.
    *   **Action:**
        *   Methods for initiating trade between regions (e.g., player buys goods in region A, transports, sells in region B).
        *   Calculate trade profitability based on price differences (from `MarketService` and `ShopService`).
        *   Could involve NPC-driven caravans that move goods and affect supply/demand in different `DBMarketRegionInfo`s.

---

**Phase 6: Asynchronous Processing & Long-Term Effects (Celery + Redis)**

*   **6.1. Identify Processes for Celery**
    *   Market simulation ticks (`MarketService.simulate_market_tick`).
    *   Business production cycles (`BusinessService.process_production_tick`).
    *   NPC economic behavior (consumption, job seeking - part of NPC agency).
    *   Long-term environmental effects (e.g., resource depletion).
*   **6.2. Define Celery Tasks**
    *   **File:** `/Users/jacc/Downloads/workspace test/app/tasks.py`
    *   **Action:**
        *   Define tasks like:
            ```python
            from .celery_app import app as celery_app
            from .db.database import SessionLocal
            # Import services

            @celery_app.task
            def run_market_simulation_for_region(region_id: str):
                db = SessionLocal()
                try:
                    market_service = MarketService() # Or get instance
                    market_service.simulate_market_tick(db, region_id)
                    db.commit()
                except Exception as e:
                    db.rollback()
                    # Log error
                finally:
                    db.close()

            @celery_app.task
            def run_business_production_for_business(business_id: str):
                # Similar structure using BusinessService
                pass
            ```
*   **6.3. Celery Configuration**
    *   **File:** `/Users/jacc/Downloads/workspace test/app/celery_app.py`
    *   **Action:** Ensure it's correctly configured to use Redis as broker and backend.
        ```python
        from celery import Celery
        # Example:
        # app = Celery('your_project_name',
        #              broker='redis://localhost:6379/0',
        #              backend='redis://localhost:6379/0',
        #              include=['app.tasks']) # Point to your tasks module
        # app.conf.update(task_track_started=True)
        ```
*   **6.4. Scheduling Periodic Tasks**
    *   **Action:** Use Celery Beat. Define a schedule in `celery_app.py` or a separate config.
        ```python
        # In celery_app.py
        # app.conf.beat_schedule = {
        #     'run-all-market-simulations-every-hour': {
        #         'task': 'app.tasks.run_all_market_simulations_globally', # A new task that iterates all regions
        #         'schedule': 3600.0, # seconds
        #     },
        # }
        ```
*   **6.5. Redis for Caching**
    *   **Action:**
        *   Identify data for caching: compiled item stats, stable market data.
        *   Implement simple caching in services:
            ```python
            # import redis
            # r = redis.Redis(host='localhost', port=6379, db=1) # Example client
            # def get_item_details_cached(item_id: str):
            #     cached = r.get(f"item:{item_id}")
            #     if cached: return json.loads(cached)
            #     # else, fetch from DB, then r.set(f"item:{item_id}", json.dumps(data), ex=3600)
            ```

---

**Phase 7: System Integration & NPC Agency**

*   **7.1. `event_bus` Integration**
    *   **File:** `event_bus.py` (ensure this is the one being used).
    *   **Action:**
        *   Define more `EventType` enums for economic events (e.g., `BUSINESS_CREATED`, `MARKET_PRICE_CHANGED`, `RESOURCE_DEPLETED`).
        *   Ensure all services publish relevant events.
        *   Other systems (narrative, AI GM) can subscribe to these events.
*   **7.2. `Location` Model and `MarketRegionInfo` Relationship**
    *   **Action:** Solidify this. A `DBLocation` should have a `region_id` that is a foreign key to `DBMarketRegionInfo.region_id`. This means a Market Region can span multiple specific locations, or a location is part of one market region. Decide on the cardinality.
*   **7.3. NPC Economic Agency (Initial Steps)**
    *   **Action:**
        1.  **NPC Model:** Assume an NPC model exists or will be created (similar to `Character`, with inventory, currency, needs).
        2.  **Basic Consumption:** NPCs consume basic goods (food, water) periodically. This creates demand.
        3.  **NPCs as Workers/Owners:** NPCs can be `owner_id` for `DBShop` / `DBBusiness` or listed in `DBBusiness.employees`.
        4.  **Simple NPC Behavior (Celery Tasks):**
            *   `npc_consumption_task(npc_id)`: NPC tries to buy needed items from local shops.
            *   `npc_work_task(npc_id)`: If employed, contributes to business (abstractly for now).
*   **7.4. Integration with `narrative_engine` and `ai_gm_brain`**
    *   **Action:** This is a larger step.
        *   Economic events (published on `event_bus`) can be triggers for narrative branches or AI GM reactions.
        *   AI GM can query economic state (e.g., "Is there a famine in region X?") via services to color descriptions or generate quests.

---

**Phase 8: API Endpoints & Player Interaction (FastAPI)***  

 **Action:**
    1.  Create FastAPI routers for different economic aspects.
    2.  Example endpoint in `shops.py`:
        ```python
        # from fastapi import APIRouter, Depends
        # from sqlalchemy.orm import Session
        # from app.db.database import get_db
        # from app.services.shop_service import ShopService
        # from app.models.economy_models import Shop as PydanticShop # For response model

        # router = APIRouter()
        # shop_service = ShopService()

        # @router.get("/shops/{shop_id}", response_model=PydanticShop) # Or a specific ShopDisplay schema
        # def read_shop(shop_id: str, db: Session = Depends(get_db)):
        #     db_shop = crud.shop.get(db, id=shop_id)
        #     if db_shop is None: raise HTTPException(status_code=404, detail="Shop not found")
        #     # Convert db_shop to PydanticShop for response
        #     return db_shop

        # @router.post("/shops/{shop_id}/buy/{item_id}")
        # def buy_item_from_shop(...):
        #     # Call transaction_service.player_buy_item()
        #     pass
        ```
    3.  Implement endpoints for:
        *   Viewing shop inventories, item details, prices.
        *   Buying/selling items (linking to `TransactionService`).
        *   Viewing player inventory and currency.
        *   Creating and managing player-owned businesses (linking to `BusinessService`).
        *   Viewing market reports (linking to `MarketService`).

---

**Phase 9: Advanced Features & Refinements**

*   **Action:** Implement these as extensions once the core system is stable.
    *   Market manipulation mechanics.
    *   Dynamic world events affecting economy.
    *   Faction-specific economies.
    *   Player/NPC crafting systems.

---

**Phase 10: Testing & Balancing**

*   **Action:**
    *   **Unit Tests:** For individual service methods and CRUD functions. Use a test database.
    *   **Integration Tests:** Test full economic cycles (e.g., business produces -> goods hit market -> price adjusts -> NPC buys).
    *   **Simulation & Balancing:** Run the economy simulation (via Celery tasks) for extended periods, observe outcomes, and tweak parameters (base prices, production rates, NPC needs, etc.) to achieve a balanced and engaging economic flow.

---

This plan is extensive. For using it with another AI, break it down phase by phase, and step by step within each phase. Provide the relevant file paths and the specific actions required for each step. Good luck!